/******************************************************************************
* @file
* Данный файл объявлет основной строительный элемент(узел) XML документа.
* На текущий момент, является завершенным без дебаг функций
*
* @author Bruvamasc
* @date   2022-09-17
*
* @todo Нужно подумать, как добавить режим дебага
* ///< Указывает, что элемент недоступен для использования
*
******************************************************************************/

#ifndef XMLB_UTILITY_H
#define XMLB_UTILITY_H

#include <vector>
#include <string>
#include <locale>

#include "XMLB_Node.h"
#include "XMLB_Node_iterator_impl.h"

namespace XMLB
{
	/**************************************************************************
	* @brief Данная функция конвертирует XML узлы в контейнер из строк
	*
	* @param[in] first - XML итератор на начало узлов
	* @param[in] last - XML итератор на конец узлов
	*
	* @return контейнер из строк
	**************************************************************************/
	std::vector<std::string> to_buffer(Node_iterator_impl<const Node> first,
		Node_iterator_impl<const Node> last);



	/**************************************************************************
	* @brief Данная функция конвертирует версию XML документа в строку, без
	* лишних нулей.
	*
	* @details Например 1.003400 -> "1.0034". 1.0000000 -> "1.0"
	*
	* @param[in] version - значение версии XML документа. Значение должно быть
	* не отрицательным
	*
	* @return строка значущая версию документа
	**************************************************************************/
	std::string version_to_string(float version);



	/**************************************************************************
	* @brief Данная функция ищет во входной строке версию XML документа.
	*
	* @param[in] input - строка, в которой может хранится версия XML документа
	* "...version="X.YZ"..." с любым количеством пробелов. Версия должна быть
	* не отрицательной
	*
	* @return если версия была найдена во входной строке и удалось
	* сконвертировать, вернет значение версии XML документа. В противном случае
	* вернет -1.0
	**************************************************************************/
	float string_to_version(const std::string& input) noexcept;



	/**************************************************************************
	* @brief Данная функция конвертирует кодировку XML документа в строку
	*
	* @datails Так как в std::locale хранится полное имя кодировки, например
	* ru_RU.UTF-8. То результатом данной функции будет UTF-8.
	*
	* @param[in] encoding - кодировка XML документа.
	*
	* @return строка значущая кодировку XML документа
	**************************************************************************/
	std::string encoding_to_string(const std::locale& input);



	/**************************************************************************
	* @brief Данная функция ищет во входной строке кодировку XML документа.
	*
	* @param[in] input - строка, в которой может хранится версия XML документа
	* "...encoding="XYZ"..." с любым количеством пробелов.
	*
	* @return кодировку XML документа. Если кодировка не была найдена во
	* входной строке, то вернет кодировку ru_RU.UTF-8
	**************************************************************************/
	std::locale string_to_encoding(const std::string& input);



	/**************************************************************************
	* @brief Данная функция создаёт тег
	*
	* @param[in] name - имя тега
	* @param[in] input - строка, в которой могут быть аттрибуты и/или
	* значение тега
	*
	* @return умный укаатель с XML узлом
	**************************************************************************/
	Node::Ptr create_node(const std::string& name, const std::string& input);



	//*************************************************************************

} // namespace XMLB

#endif // !XMLB_UTILITY_H